import "std"
import foo, bar as baf from "mymodule"

export func foo()
end

# this is a comment
# and another one
var truthy = true
var truthy: bool = true

var num = 0
var num: number = 2 + 34 + cosine(0.4)

var str = "This is a testðŸ˜Š\n"
export var str: string = "This is a testðŸ˜Š\n"

var union: bool | number | string | nothing = nothing

if union is nothing then
    print("Got nothing")
else
    if union is bool then
        print("It's a boo: " + union.toString())
    elseif union is number then
        print("It's a number: " + union.toString())
    elseif union is string then
        print("It's a string: " + union)
    end
end

var array = [0, 1, 3]
var array: [number] = [23, 5, 43]
var first = array[0]
var last = array[array.length - 1]
var sum = 0
for each num in array do
    sum = sum + num
end
print(sum)

var array = [0, "test", true]
var array: [number | string | bool] = [0, "test", true]

var map = { "a": 1, "b": 2, "c": 3}
var map: {number} = {"a": 1, "b": 2, "c": 3}
var keys = map.keys
var keys: [string] = map.keys
var values = map.values

var map: {number | string | [number]} = { "a" : 0, "b": "test", "c": [123, 123]}
for each key in map.keys do
    var value = map[key]
    if value is number then
        print("It's a number: " + value)
    end
end
var a = map.a

var record = < a: 0, b: 2 >
var record: <a: number, b: number> =  < a: 0, b: 2 > 2>
record.a = 0

type node = <
    children: [node] | nothing,
    value: number
>

# Auto-generate constructor function for record?
export func node(children: [node] | nothing, value: number): node
    return <children: children, value: value>
end

func node(value: number): node
    return <children: [], value: value>
end

export external func myExternalFunc(x: number, y: number);
export external func myExternalFunc(x: number, y: number): nothing;

var n: node = <children: [], value: 1>
var n = node([], 1)
var leaf = node(1)

func traverse(node: node): nothing
    print(node.value.toString())
    if !(node.children is nothing) then
        for each child in children do
            traverse(child)
        end
    end
end

var n = node([], 1)
traverse(n)

var n = node([], 1)
n.traverse()

# type aliased records get an auto-generated constructor function
# e.g. func color(r: number, g: number, b: number) return <r: r, g: g, b: b> end
type color = <r: number, g: number, b: number>
func toString(color: color): string
    return "r: " + r + ", g:" + g + ", b"
end
type colored = <color: color>
type rectangle = colored + <width: number, height: number> # mixins!
type circle = colored + <radius: number>
var r = rectangle(color(255, 0, 255), 13, 23)
var c = circle(color(255, 0, 255), 3)
type shapes = rectangle | circle

func shapeInfo(shape: shapes): nothing
    if shape is rectangle then
        # shape is now known to be a rectangle
        print("rectangle: " + shape.color.toString() + shape.width + ", " + shape.height)
    elseif shape is circle then
    else
        print("Oh no.")
    end
end

func coloredInfo(colored: colored): nothing
    print("colored: " + colored.color.toString())
end

shapeInfo(r)
shapeInfo(c)
coloredInfo(r) # r conforms to colored
coloredInfo(c) # c conforms to colored

func add(a: number, b: number): number
    return a + b
end

var f = func(a: number, b: number): number
    return a + b
end

func b(f: (a: number, b: number): number)
    print(f(1, 2).toString())
end

func t(a: <x: number, y: number>): <x: number, y: number>
    a.x = a.x * 10
    a.y = a.y * 10
    return a
end

func noReturn(): nothing
    return;
end

var f: () = noReturn
var f2: (a: <x: number, y: number>): <x: number, y: number> = t

for i from 0 to 10 step 2 do
    if i == 7 then
        continue
    end
    print("Hello")
    if i == 8 then
        break
    end
end

for each element in myArray do
    print(element.toString())
end

while a > 0 do
    a = a + 1
    b = b + 1
    if a > 0 then a = 10 end
end

do
    a = 0
    b = 123
while c > 0

if a then
    a = 2
    b = 3
elseif b then
    b = 2
elseif c then
    c = 8
else
    printf("oh no")
end

true ? 123 : 34
false ? 234 : 34
!true
-123
+34
nothing
a.toNumber(12)
"\t\n\r\""
0xfa23fbc
0xFFaaFaC
0b10110101
_test

a.b.toString()