# you're looking at a source code file written in Littelfoot, a small
# programming language that's intended to be used to teach and learn
# programming. I'm a comment, as simple as it gets. I and my friends
# below me will get attached the the next abstract syntax tree node
# that's being parsed. This surely will come in handy, if I ever
# add a code documentation system ala JavaDocs or Doxygen.
"hello, i'm a string. I'm immutable. Everything is utf-8 in littlefoot. ðŸ¦–
You can even make me multi-line. No string interpolation though. The Monaco
editor token provider doesn't support highlighting multi-line strings
yet, because I'm too lazy to figure out the correct regex incantation ðŸ¤·"

# Have a look at the right side of the screen. That's where you'll find
# the abstract syntax tree (AST) the parser generated from the source
# code, printed as JSON. The "kind" field tells you what type of AST node
# you are looking at. Each node is assigned a type by the type checker,
# which is also shown in the "type" field of a node.

# You can select text in the source code file to see only the AST nodes
# for the selection.

# Apart from srings you can also have plain old numbers. You can specify
# number values as integers, decimal, hex, and binary numbers. These
# will be stored as 64-bit doubles.
1; 2.234; 0xff; 0b10101;

# Booleans values are also supported.
true;
false;

# There's also nothing, which is used to signal the absence of a value, like
# when a function doesn't return anything. We'll see nothing again later.
nothing;

# The value literals above are all expressions. As you can see, expressions
# can be free standing, just like other more common statements like if, while
# etc.

# You can also have (nested) lists.
[0, 1, 2, 3];
["Hello", "world"];
[true, true, false, true];
[
  ["Little", "foot"],
  ["Another", "one", "bites", "the", "dust"]
]

# Maps to store key/value pairs are also available.
# The keys are always strings. They kinda look like JSON.
# You can add and remove any number of key/value pairs you want.
{ "x": 0, "y": 0 }
{
  "name": "Mario",
  "address": {
    "street": "Mushroom Lane 12",
    "city": "Mushroom Kingdom"
  },
}

# Records are also supported. A record has one or more
# named fields with a value of a specific type each. They
# are less free-form than maps, as you can not add
# or remove fields, like you can add or remove key/value
# pairs to and from a map.
<x: 0, y: 0, name: "Luigi">
<
  position: <x: 0, y: 0>,
  color: <r: 255, g: 0, b: 255>
>


